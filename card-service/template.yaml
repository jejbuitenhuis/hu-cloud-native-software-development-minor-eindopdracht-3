AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Card-service

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Handler: app.lambda_handler
    Runtime: python3.9
    Architectures:
      - x86_64
    Tracing: Active
    Environment:
      Variables:
        EVENT_BUS_ARN:
          Fn::ImportValue:
            !Sub "common-service-${Stage}-MTGEventBus"
        TABLE_NAME:
          Fn::ImportValue:
            !Sub "${Stage}-mtg-card-db"
        #update frequency in days
        CARDS_UPDATE_FREQUENCY: "7"

Parameters:
  Stage:
    Type: String
    Default: development

Resources:
  MTGCardApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Stage}-mtg-card-api"
      StageName: !Ref Stage
      OpenApiVersion: '2.0'
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger-spec.json
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status":$context.status,"responseLatency":$context.responseLatency}'

  AccessLogGroup:
    Type: AWS::Logs::LogGroup

  MTGCardDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: RemoveAt
        Enabled: true
      BillingMode: PAY_PER_REQUEST

#  CardsDBUpdateEventBusScheduler:
#    Type: AWS::Scheduler::Schedule
#    Properties:
#      FlexibleTimeWindow:
#        Mode: "FLEXIBLE"
#        MaximumWindowInMinutes: 360
#      Target:
#        Arn: !Ref RenewEntitiesFunction.Arn
#        RoleArn: !Ref SchedulerRole.Arn
#      ScheduleExpression: !Sub "rate(${CARDS_UPDATE_FREQUENCY} days)"

#  event_rule
#  role_arn

  renewEntitiesRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to trigger RenewEntitiesFunction, to renew the card database"
      Name: !Sub "${Stage}-renew-entities-rule"
      ScheduleExpression: "cron(0 4 * * ? *)"
      Targets:
        - Arn: !GetAtt RenewEntitiesFunction.Arn
          Id: !Sub "${Stage}-renew-entities-rule-target"
#      RoleArn:

  RenewEntitiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/renewEntities
      MemorySize: 500
      Timeout: 180
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref MTGCollectionDynamoDBTable

Outputs:
  MTGCardApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MTGCardApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  MTGCardApi:
    Description: "Api gateway"
    Value: !Ref MTGCardApi
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-api'
#  RenewEntitiesFunction:
#    Description: "Lambda function"
#    Value: !Ref RenewEntitiesFunction
#    Export:
#      Name:
#        'Fn::Sub': !GetAtt RenewEntitiesFunction.Arn

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: common-service

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Handler: app.lambda_handler
    Runtime: python3.9
    Architectures:
      - x86_64
    Tracing: Active
  Api:
    TracingEnabled: true

Parameters:
  Stage:
    Type: String
    Default: staging

Resources:
  MTGEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${Stage}-mtg-event-bus"

  EventBusPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: MTGEventBus
      StatementId: !Sub "${Stage}AllowToPutEvents"
      Statement:
        Effect: "Allow"
        Principal: "*"
        Action: "events:PutEvents"
        Resource: !GetAtt MTGEventBus.Arn

  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Stage}-scheduler--trigger-function-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "scheduler.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "InvokeLambdaFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Effect: "Allow"
                Resource: !GetAtt RenewEntitiesFunction.Arn

  CardSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub "${Stage}-card-schedule"
      FlexibleTimeWindow:
        Mode: OFF
      ScheduleExpression: "cron(0 5 * * ? *)"
      Target:
        Arn: !GetAtt RenewEntitiesFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn

Outputs:
  MTGEventBus:
    Description: "Event bus"
    Value: !Ref MTGEventBus
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-MTGEventBus'
#  SchedulerRole:
#    Description: "Role the scheduler uses to invoke lambda"
#    Value: !Ref SchedulerRole
#    Export:
#      Name:
#        'Fn::Sub': !GetAtt SchedulerRole.Arn

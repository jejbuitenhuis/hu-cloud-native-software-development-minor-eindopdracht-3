AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: common-service

Parameters:
  Stage:
    Type: String
    Default: staging

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Handler: app.lambda_handler
    Runtime: python3.9
    Architectures:
      - x86_64
    Tracing: Active
  Api:
    TracingEnabled: true

Resources:
  MTGApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MTGApiGateway
      Description: An API Gateway for MTG
      ProtocolType: HTTP

  ApiGatewayDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn: HelloWorldIntegration
    Properties:
      Description: Lambda API Deployment
      ApiId: !Ref MTGApiGateway

  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage
      ApiId: !Ref MTGApiGateway
      StageName: !Ref Stage

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:*"
                Resource: !GetAtt HelloWorldFunction.Arn

  HelloWorldIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MTGApiGateway
      Description: Test Integration
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt ApiGatewayIamRole.Arn
      PassthroughBehavior: WHEN_NO_MATCH
      TimeoutInMillis: 29000
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations"

  HelloWorldRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - HelloWorldFunction
    Properties:
      ApiId: !Ref MTGApiGateway
      RouteKey: GET /hello
      Target: !Join
        - /
        - - integrations
          - !Ref HelloWorldIntegration

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/hello_world/
      Role: !GetAtt HelloWorldFunctionIamRole.Arn

  HelloWorldFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

Outputs:
  MTGApiGateway:
    Description: "MTG API Gateway"
    Value: !Ref MTGApiGateway
    Export:
      Name: !Sub "${AWS::StackName}-MTGApiGateway"
  MTGApiGatewayDomainName:
    Description: "MTG API Gateway Domain Name"
    Value: !Join [ '', [ !Ref MTGApiGateway, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com' ] ]
    Export:
      Name: !Sub "${AWS::StackName}-MTGApiGatewayDomainName"

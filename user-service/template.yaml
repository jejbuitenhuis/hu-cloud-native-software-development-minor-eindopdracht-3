AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: user-service

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Handler: app.lambda_handler
    Runtime: python3.9
    Architectures:
      - x86_64
    Tracing: Active
    Environment:
      Variables:
        EVENT_BUS_ARN:
          Fn::ImportValue:
            !Sub "${CommonStack}-MTGEventBus"

Parameters:
  Stage:
    Type: String
    Default: staging
  CommonStack:
    Type: String
    Default: common-service

Resources:
  MTGUserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Stage}-mtg-user-api"
      StageName: Prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger-spec.json
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status":$context.status,"responseLatency":$context.responseLatency}'

  AccessLogGroup:
    Type: AWS::Logs::LogGroup

  MTGUserDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub "${Stage}-mtg-user-db"
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  PingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/Ping/
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref "MTGUserApi"
            Path: /ping
            Method: get

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MTGUserPool
      EmailVerificationSubject: Please verify your email address
      EmailVerificationMessage: "Hello {username},\n\nPlease click the following link to verify your email: {link}"
      Policies:
        PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
      Schema:
        - Name: email
          Required: true
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: MTGUserPoolClient

  RegisterUserIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MTGApiGatewayId
      Description: Register User Integration
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt ApiGatewayIamRole.Arn
      PassthroughBehavior: WHEN_NO_MATCH
      TimeoutInMillis: 29000
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterUserFunction.Arn}/invocations"

  RegisterUserRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - RegisterUserFunction
    Properties:
      ApiId: !Ref MTGApiGatewayId
      RouteKey: POST /users/new
      Target: !Join
        - /
        - - integrations
          - !Ref RegisterUserIntegration

  RegisterUserFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: RegisterUserFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-idp:AdminCreateUser"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "cognito-idp:AdminInitiateAuth"
                Resource: "*"

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: RegisterUserFunction
      CodeUri: functions/register_user/
      Role: !Ref RegisterUserFunctionIamRole
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient

Outputs:
  UserPoolClientId:
    Description: UserPool Client Id
    Value: !Ref UserPoolClient
  HelloWorld2Function:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorld2Function.Arn
  HelloWorld2FunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorld2FunctionIamRole.Arn
  MTGUserApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MTGUserApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"

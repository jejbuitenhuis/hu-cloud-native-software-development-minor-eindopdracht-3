AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: user-service

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Handler: app.lambda_handler
    Runtime: python3.9
    Architectures:
      - x86_64
    Tracing: Active
    Environment:
      Variables:
        EVENT_BUS_ARN:
          Fn::ImportValue:
            !Sub "${CommonStack}-MTGEventBus"

Parameters:
  Stage:
    Type: String
    Default: staging
  CommonStack:
    Type: String
    Default: common-service-development

Resources:
  MTGUserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Stage}-mtg-user-api"
      StageName: !Ref Stage
      OpenApiVersion: '2.0'
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger-spec.json
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status":$context.status,"responseLatency":$context.responseLatency}'

  AccessLogGroup:
    Type: AWS::Logs::LogGroup

  PingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/Ping/
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref "MTGUserApi"
            Path: /ping
            Method: get

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Stage}-MTGUserPool"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
      Policies:
        PasswordPolicy:
            MinimumLength: 8
      Schema:
        - Name: email
          AttributeDataType: String
        - Name: username
          AttributeDataType: String

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${Stage}-mtg-user-pool-domain"
      UserPoolId: !Ref UserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/register_user/
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref "MTGUserApi"
            Path: /auth/register
            Method: post
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonCognitoPowerUser

Outputs:
  UserPoolClientId:
    Description: UserPool Client Id
    Value: !Ref UserPoolClient
  UserPoolId:
    Description: UserPool Id
    Value: !Ref UserPool
  RegisterUserFunction:
    Description: Function
    Value: !GetAtt RegisterUserFunction.Arn
  MTGUserApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MTGUserApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  MTGUserApi:
    Description: "Api gateway"
    Value: !Ref MTGUserApi
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-api'